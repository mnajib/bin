#!/usr/bin/env bash

#
# NOTE:
# -----
#
# To create RAID-1 (mirror):
#   mkfs.btrfs -L MyMirrorDisks -m raid1 -d raid1 /dev/sdg /dev/sdh
#
# To add device:
#   btrfs device add -f /dev/sdi /mnt/btr_pool1
#   btrfs device add -f /dev/mapper/vg2-root2 /mnt/btr_pool1
#
# To balance
#   btrfs balance start /mnt/btr_pool1
# To changing RAID levels, ... filesystem
#   btrfs balance start -dconvert raid1 -mconvert=raid1 /mnt/btr_pool1
# To check balance status
#   btrfs balance status /mnt/btr_pool1
# To fix/continue incomplete balance
#   btrfs balance start convert=raid1,soft /mnt/btr_pool1
#
# To defrag
#   btrfs filesystem defragment /mnt/btr_pool1
#
# In case that 1 of the disks failed (example in mirror mode), then mount the remaining device in degraded mode.
# Check which device(s) is still alive with:
#   btrfs filesystem show
# Then, mount in degraded mode the available device (example: /dev/sdg):
#   mkdir /tmp/kkk
#   mount -o degraded /dev/sdg /tmp/kkk/mount/point/
# We still can read and write while on the degraded mode.
#
# To remove device
#   btrfs device delete /dev/sdi /mnt/btr_pool1
# To remove missing device
#   btrfs device delete missing /mnt/btr_pool1
#
# To scrub
#   sudo btrfs scrub start /mnt/btr_pool1
# To check scrub status
#   sudo btrfs scrub status /mnt/btr_pool1

DEVICE1=""
DEVICE2=""
MOUNTPOINT1="/mnt/btrbk_pool1"       # keira
#MOUNTPOINT1="/mnt/btr_pool1"          # ...?
#MOUNTPOINT2="/mnt/btrbk_pool2"       # "/mnt/btr_pool2"

# Start new tmux session
#...

#
# Usage:
#   monitorScrubStatus /mnt/btr_pool1
#   monitorScrubStatus /mnt/btr_pool2
#
monitorInTmuxPane() {
  local MOUNTPOINT="$1"

  #tmux new-session -d \; 'watch btrfs scrub status /mnt/btr_pool1' \; \
  #    split-pane 'watch btrfs scrub status /mnt/btr_pool2' \; \
  #    split-window -h 'watch btrfs device stats -T /mnt/btr_pool1' \; \
  #    split-window -v 'watch btrfs device stats -T /mnt/btr_pool1'

  tmux split-pane "watch scrubStatus $MOUNTPOINT1" \; \
      select-layout even-vertical

  #tmux select-layout even-vertical
  #tmux select-layout even-horizontal
}

# Represent "Nothing" in the Maybe monad
nothing() {
  return 1  # Failure
}

# Represent "Just" in the Maybe monad
just() {
  echo "$1"
  return 0  # Success
}

# Bind operation for Maybe monad
maybe_bind() {
  local result
  result="$($1)" || return 1  # Call the function directly and capture the result
  $2 "$result"                # Pass the result to the second function
}

# Function to check if a path is a Btrfs mount (simulates Maybe monad)
is_btrfs_mount() {
  local path=$1

   # Check if the path exists
  if [[ ! -e "$path" ]]; then
    echo "Error: Path '$path' does not exist."
    nothing
    return
  fi

  # Check if the path is a Btrfs mount
  if findmnt -t btrfs -n --target "$path" > /dev/null 2>&1; then
    just "$path"
  else
    nothing
  fi
}

# Collect raw mount point data (impure)
collect_btrfs_mount_data_io() {
  findmnt -t btrfs -o TARGET,OPTIONS -rn
}

# Filter for subvolid=5 (pure-like)
filter_subvolid5() {
  while read -r line; do
    local MOUNT_POINT=$(echo "$line" | awk '{print $1}')
    local OPTIONS=$(echo "$line" | awk '{print $2}')
    if echo "$OPTIONS" | grep -q "subvolid=5"; then
      echo "$MOUNT_POINT"
    fi
  done
}

# Process each mount point (example impure function)
process_mount_point_io() {
  local MOUNT_POINT=$1
  echo "Processing mount point: $MOUNT_POINT"

  # Example: List subvolumes for this mount point
  echo "Subvolumes under $MOUNT_POINT:"
  sudo btrfs subvolume list "$MOUNT_POINT"
  echo
}

# Main function to process and display results (impure)
get_btrfs_mount_points_with_subvolid5_io() {
  collect_btrfs_mount_data_io | filter_subvolid5
}

# Use existing function and process its results
process_all_btrfs_mount_points_with_subvolid5_io() {
  #get_btrfs_mount_points_with_subvolid5_io | while read -r MOUNT_POINT; do
    #printReportAll "$MOUNT_POINT"
    #process_mount_point_io "$MOUNT_POINT"
  #  maybe_bind "is_btrfs_mount $mount_point" "process_mount_point"
  #done

  local mounts
  #mounts=$(collect_btrfs_mount_data_io | filter_subvolid5)
  mounts=$(get_btrfs_mount_points_with_subvolid5_io)

  if [[ -z "$mounts" ]]; then
    echo "No Btrfs mount points with subvolid=5 found."
    return
  fi

  echo "$mounts" | while read -r mount_point; do
    #maybe_bind "is_btrfs_mount $mount_point" "process_mount_point_io"
    maybe_bind "is_btrfs_mount $mount_point" "printReportAll"
  done
}

# Main function to process and display results (impure)
#get_btrfs_mount_points_with_subvolid5_and_process_io() {
#  collect_btrfs_mount_data_io | filter_subvolid5 | while read -r MOUNT_POINT; do
#    process_mount_point_io "$MOUNT_POINT"
#  done
#}

printTitle(){
  local title="$1"
  echo '/##############################################'
  echo "| $1"
  echo '\##############################################'
  echo
}

printReportAll() {
  local MOUNTPOINT1=$1

  printTitle "df -hT | grep btrfs"
  #dfInfo
  diskInfo

  echo
  printTitle "btrfs filesystem show"
  filesystemShow

  echo
  printTitle "btrfs filesystem usage ${MOUNTPOINT1}"
  btrfs filesystem usage -T ${MOUNTPOINT1}

  echo
  printTitle "btrfs filesystem df ${MOUNTPOINT1}"
  btrfs filesystem df ${MOUNTPOINT1}

  #echo
  #printTitle "btrfs filesystem df ${MOUNTPOINT1}"
  #btrfs filesystem df ${MOUNTPOINT1}

  echo
  printTitle "btrfs scrub status ${MOUNTPOINT1}"
  scrubStatus ${MOUNTPOINT1}

  #echo
  #printTitle "btrfs scrub status ${MOUNTPOINT1}"
  #scrubStatus ${MOUNTPOINT1}

  echo
  printTitle "btrfs device stats ${MOUNTPOINT1}"
  deviceStats ${MOUNTPOINT1}

  #echo
  #printTitle "btrfs device stats ${MOUNTPOINT1}"
  #deviceStats ${MOUNTPOINT1}

  echo
  printTitle "btrfs balance status ${MOUNTPOINT1}"
  balanceStatus ${MOUNTPOINT1}

  #echo
  #printTitle "btrfs balance status ${MOUNTPOINT1}"
  #balanceStatus ${MOUNTPOINT1}

  #echo
  #btrbkInfo
}

#---------------------------------------------------------------
# btrbk

btrbkInfo() {
  printTitle "btrbk stats"
  sudo btrbk stats
  echo
  printTitle "btrbk usage"
  btrbk usage
}

#---------------------------------------------------------------

dfInfo() {
  df -hT | grep btrfs
}

diskInfo() {
  lsblk -pif

  echo
  #dfInfo
  df -hT | grep btrfs

  echo
  mount | grep btrfs
}

scrubStatus() {
  local MOUNTPOINT="$1"
  sudo btrfs scrub status $MOUNTPOINT1
}

deviceStats() {
  local MOUNTPOINT="$1"
  sudo btrfs device stats -T $MOUNTPOINT1
}

balanceStatus() {
  local MOUNTPOINT="$1"
  sudo btrfs balance status $MOUNTPOINT1;
}

filesystemShow() {
  #local MOUNTPOINT="$1"
  sudo btrfs filesystem show --human-readable
}

about(){
  #echo "$0"
  echo "Version: 0.0.1"
  echo "Author: Muhammad Najib Bin Ibrahim"
  echo "Email: mnajib@gmail.com"
}

version(){
  echo "$0 v0.0.1"
}

usage(){
  echo "Usage: $0 [OPTIONS]"
  echo "OPTIONS:"
  echo "  -h, --help        Display this help message."
  echo "  -v, --version     Display this script version."
  echo "  -a, --about       Display about this script."
  echo "  -l, --list        Get a list of mount points for btrfs with subvolid=5."
  echo "  -t, --try         Try to get all info with less user intervention needed."
}

match() {
  case $1 in
  -h|--help)
    usage
    exit 0
    ;;
  -v|--version)
    version
    exit 0
    ;;
  -a|--about)
    about
    exit 0
    ;;
  -l|--list)
    echo "Btrfs mount points with subvolid=5:"
    get_btrfs_mount_points_with_subvolid5_io
    exit 0
    ;;
  -t|--try)
    echo "Processing each mount point:"
    process_all_btrfs_mount_points_with_subvolid5_io
    exit 0
    ;;
  *)
    # without any arguments
    if [ -z "$1" ]; then #if [ -n "$1"]; then
      #printReportAll
      #printReportAll | less
      echo "Invalid input. Please enter a valid input."
      echo
      usage
      exit 1
    else #If any other argument(s)
      #echo "Invalid input. Please enter a valid input."
      #exit 1
      printReportAll "$MOUNTPOINT1"
    fi
    # without any arguments
    #printReportAll
    ;;
  esac
}

main() {
  match "$@"
}

#printReportAll
main "$@"
