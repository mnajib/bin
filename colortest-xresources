#!/usr/bin/env bash
# colortest-xresources
# Najib Ibrahim <mnajib@gmail.com>
#
# Requirement:
#   xrdb
#   grep
#   sed
#   awk
#   sort

colorNames[0]="DBlack "
colorCodes[0]="000000"
colorNames[8]="LBlack "
#colorCodes[8]="4c4c4c"
colorCodes[8]="4b4b4b"

colorNames[1]="DRed   "
colorCodes[1]="cc0000"
colorNames[9]="LRed   "
colorCodes[9]="ff4c4c"

colorNames[2]="DGreen "
colorCodes[2]="009200"
colorNames[10]="LGreen "
colorCodes[10]="00d700"

colorNames[3]="DYellow"
#colorCodes[3]="b8b84c"
#colorCodes[3]="aaaa44"
#colorCodes[3]="a3a341"
colorCodes[3]="af871c"
colorNames[11]="LYellow"
#colorCodes[11]="ffff87"
#colorCodes[11]="ffff00"
#colorCodes[11]="fffc6f"
colorCodes[11]="dfaf00"

colorNames[4]="DBlue  "
colorCodes[4]="2278e6"
colorNames[12]="LBlue  "
colorCodes[12]="67a2ee"

colorNames[5]="DMgenta"
colorCodes[5]="8c00a0"
colorNames[13]="LMgenta"
colorCodes[13]="c64ed7"

colorNames[6]="DCyan  "
colorCodes[6]="01b5b5"
colorNames[14]="LCyan  "
colorCodes[14]="45fdfd"

colorNames[7]="DWhite "
#colorCodes[7]="8b8b8b"
#colorCodes[7]="aeaeae"
colorCodes[7]="afafaf"
#colorCodes[7]="b9b9b9"
colorNames[15]="LWhite "
colorCodes[15]="ffffff"

#------------------------------------------------------------------------------
color(){
    for c; do
        printf '\e[48;5;%dm%03d' $c $c
    done
    printf '\e[0m \n'
}
#IFS=$' \t\n'
#color {0..15}
#for ((i=0;i<6;i++)); do
#    color $(seq $((i*36+16)) $((i*36+51)))
#done
#color {232..255}

#------------------------------------------------------------------------------
# Usage example:
#   color2 128 72 "Selamat Pagi Malaysia!"
color2 () {
  #bg256=160 # red
  #fg256=31  # blue
  local bgc=$1
  local fgc=$2
  local s="$3"

  # Example:
  #   tput setaf 38; tput setaf 38 | cat -v
  #   tput setaf 38; tput setaf 38 | echo 38
  #   tput setab 160; tput setaf 38; tput setaf 38 | cat -v; tput sgr0
  #
  #printf '\e[48;5;%dm%03d' $c $c
  #tput setaf $fg256; tput setaf $fg256 | cat -v

  #printf '\e[38;5;%d;48;5;%dm%s' $fgc $bgc "$s"
  #printf '\e[0m \n' # Reset
  #printf '\e[38;5;%d;48;5;%dm%s\e[0m\n' $fgc $bgc "$s"
  printf '\e[38;5;%d;48;5;%dm%s\e[0m' $fgc $bgc "$s"
}

#------------------------------------------------------------------------------
printColor3 () {
  local bgc=$1
  local fgc=$2
  local s="$3"

  #printf '\e[38;5;%d;48;5;%dm%s' $fgc $bgc "$s"
  #printf '\e[0m \n' # Reset
  #printf '\e[38;5;%d;48;5;%dm%s\e[0m\n' $fgc $bgc "$s"
  #printf '\e[38;5;%d;48;5;%dm%s\e[0m' $fgc $bgc "$s"
  printf '\e[38;5;%d;48;5;%dm%3s%3s\e[0m' $fgc $bgc "$bgc" "$fgc"
  #printf ' %3s,%3s ' $bgc $fgc                               # print text (black, black, red, red, green, green, ...) in the box
}

#------------------------------------------------------------------------------
# Example usage:
#   fromhex 00fc7b
#   fromhex #00fc7b
fromhex(){
    hex=${1#"#"}
    r=$(printf '0x%0.2s' "$hex")
    g=$(printf '0x%0.2s' ${hex#??})
    b=$(printf '0x%0.2s' ${hex#????})
    #printf '%03d' "$(( (r<75?0:(r-35)/40)*6*6 +
    printf '%d' "$(( (r<75?0:(r-35)/40)*6*6 +
                       (g<75?0:(g-35)/40)*6   +
                       (b<75?0:(b-35)/40)     + 16 ))"
}
#echo $(fromhex d0323a)

#------------------------------------------------------------------------------
# Example usage:
#   tohex 125
#   tohex 6
#   tohex 235
tohex(){
    dec=$(($1%256))   ### input must be a number in range 0-255.
    if [ "$dec" -lt "16" ]; then
        bas=$(( dec%16 ))
        mul=128
        [ "$bas" -eq "7" ] && mul=192
        [ "$bas" -eq "8" ] && bas=7
        [ "$bas" -gt "8" ] && mul=255
        a="$((  (bas&1)    *mul ))"
        b="$(( ((bas&2)>>1)*mul ))" 
        c="$(( ((bas&4)>>2)*mul ))"
        printf 'dec= %3s basic= #%02x%02x%02x\n' "$dec" "$a" "$b" "$c"
    elif [ "$dec" -gt 15 ] && [ "$dec" -lt 232 ]; then
        b=$(( (dec-16)%6  )); b=$(( b==0?0: b*40 + 55 ))
        g=$(( (dec-16)/6%6)); g=$(( g==0?0: g*40 + 55 ))
        r=$(( (dec-16)/36 )); r=$(( r==0?0: r*40 + 55 ))
        printf 'dec= %3s color= #%02x%02x%02x\n' "$dec" "$r" "$g" "$b"
    else
        gray=$(( (dec-232)*10+8 ))
        printf 'dec= %3s  gray= #%02x%02x%02x\n' "$dec" "$gray" "$gray" "$gray"
    fi
}
#for i in $(seq 0 255); do
#    tohex ${i}
#done

#------------------------------------------------------------------------------
printCurrentColorTall () {
  echo "Print Current Color"
}

#------------------------------------------------------------------------------
printTestColorWide () {
  echo "Print Test Color"
  echo ""

  #local FGNAMES=(' black ' '  red  ' ' green ' ' yellow' '  blue ' 'magenta' '  cyan ' ' white ' ' black ' '  red  ' ' green ' ' yellow' '  blue ' 'magenta' '  cyan ' ' white ')
  local XCOLORS=('color0 ' 'color1 ' 'color2 ' 'color3 ' 'color4 ' 'color5 ' 'color6 ' 'color7 ' 'color8 ' 'color9 ' 'color10' 'color11' 'color12' 'color13' 'color14' 'color15')

  tput sgr0
  #echo -en "         "
  echo -en "      FG:"
  echo -en " "
  for h in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
      printf ' %7s ' ${XCOLORS[$h]}
  done
  echo $(tput sgr0)                                 # reset background and foreground color

  echo -en "   BG:   "
  echo -en "┌"
  for j in {0..143}; do
    echo -en "─"
  done
  echo "┐"

  for bg_color in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do

    printf ' %7s ' ${XCOLORS[$bg_color]}            # print text (color0, color8, color1, ...) outside-left of the box
    echo -en "│"

    bgc=$(fromhex ${colorCodes[$bg_color]})
    fg2c=$(fromhex ${colorCodes[$bg_color]})

    for fg_color in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
      fgc=$(fromhex ${colorCodes[$fg_color]})
      bg2c=$(fromhex ${colorCodes[$fg_color]})
      t="$bgc,$fgc"
      printf '\e[38;5;%d;48;5;%dm %7s \e[0m' $fgc $bgc "$t"
    done

    tput sgr0                                       # reset background and foreground color
    echo -en "│"
    #printf ' %7s' ${colorNames[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    #printf ' #%6s' ${colorCodes[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    t1=${colorNames[$bg_color]}
    t2=${colorCodes[$bg_color]}
    #printf '\e[38;5;%dm %7s\e[0m' $fg2c ${colorNames[$bg_color]}
    #printf '\e[38;5;%dm #%6s\e[0m' $fg2c ${colorCodes[$bg_color]}
    printf '\e[38;5;%dm %7s #%6s\e[0m' $fg2c "$t1" "$t2"
    echo $(tput sgr0)
  done

  echo -en "         "
  echo -en "└"
  for j in {0..143}; do
    echo -en "─"
  done
  echo "┘"

  tput sgr0
  echo -en "         "
  echo -en " "
  for h in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
      printf ' %7s ' ${colorNames[$h]}
  done
  echo $(tput sgr0)                                 # reset background and foreground color
  echo ""
}

#------------------------------------------------------------------------------
printTestColorWideWithFile () {
  echo "Print Test Color"
  echo ""

  local f="$1"
  local colors=( )
  local systemColors=( )

  #readarray -t colors < <( grep '\*\.color.*\:.*#' $f | sed 's/^\*\.color//' | sed 's/**://' | sort -n )
  readarray -t colors < <( grep '\*.*color.*\:.*#' $f | sed 's/^.*color//' | sed 's/**://' | sort -n )
  for (( i=0; i < ${#colors[@]}; i++ )); do
    systemColors[$i]="$( echo "${colors[$i]}" | awk '{print $2}' )"
    #echo "${systemColors[$i]}"
  done

  #local FGNAMES=(' black ' '  red  ' ' green ' ' yellow' '  blue ' 'magenta' '  cyan ' ' white ' ' black ' '  red  ' ' green ' ' yellow' '  blue ' 'magenta' '  cyan ' ' white ')
  local XCOLORS=('color0 ' 'color1 ' 'color2 ' 'color3 ' 'color4 ' 'color5 ' 'color6 ' 'color7 ' 'color8 ' 'color9 ' 'color10' 'color11' 'color12' 'color13' 'color14' 'color15')

  tput sgr0
  #echo -en "         "
  echo -en "      FG:"
  echo -en " "
  for h in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
      printf ' %7s ' ${XCOLORS[$h]}
  done
  echo $(tput sgr0)                                 # reset background and foreground color

  echo -en "   BG:   "
  echo -en "┌"
  for j in {0..143}; do
    echo -en "─"
  done
  echo "┐"

  for bg_color in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do

    printf ' %7s ' ${XCOLORS[$bg_color]}            # print text (color0, color8, color1, ...) outside-left of the box
    echo -en "│"

    bgc=$(fromhex ${systemColors[$bg_color]})
    #fg2c=$(fromhex ${systemColors[$bg_color]})
    fg2c=$bgc
    for fg_color in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
      fgc=$(fromhex ${systemColors[$fg_color]})
      #bg2c=$(fromhex ${systemColors[$fg_color]})
      bg2c=$fgc
      t="$bgc,$fgc"
      printf '\e[38;5;%d;48;5;%dm %7s \e[0m' $fgc $bgc "$t"
    done

    tput sgr0                                       # reset background and foreground color
    echo -en "│"
    #printf ' %7s' ${colorNames[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    #printf ' #%6s' ${colorCodes[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    t1=${colorNames[$bg_color]}
    t2=${colorCodes[$bg_color]}
    #printf '\e[38;5;%d;48;5;%dm %7s\e[0m' $fg2c 0 "$t1"
    #printf '\e[38;5;%d;48;5;%dm #%6s\e[0m' $fg2c 0 "$t2"
    printf '\e[38;5;%d;48;5;%dm %7s #%6s\e[0m' $fg2c 0 "$t1" "$t2"
    echo $(tput sgr0)
  done

  echo -en "         "
  echo -en "└"
  for j in {0..143}; do
    echo -en "─"
  done
  echo "┘"

  tput sgr0
  echo -en "         "
  echo -en " "
  for h in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
      printf ' %7s ' ${colorNames[$h]}
  done
  echo $(tput sgr0)                                 # reset background and foreground color
  echo ""
}

#------------------------------------------------------------------------------
getSystemColor () {
  #xrdb -query -all | grep '\*color.*\:.*#' | sed 's/^\*color//' | sed 's/**://'

  #local colors = ()
  #while read -a line; do
  #  colors += ()
  #done < <(xrdb -query -all | grep '\*color.*\:.*#' | sed 's/^\*color//' | sed 's/**://')


  #readarray -t colors < <(xrdb -query -all | grep '\*color.*\:.*#' | sed 's/^\*color//' | sed 's/**://' | sed 's/#//' | sort -n) 
  readarray -t colors < <( xrdb -query -all | grep '\*.*color.*\:.*#' | sed 's/^.*color//' | sed 's/**://' | sort -n )

  #printf '%s\n' "${colors[@]}"
  #for each in "${colors[@]}"
  #do
  #  echo "$each"
  #done

  for (( i=0; i < ${#colors[@]}; i++ )); do
    #echo "${colors[$i]}"
    #systemColors[$i]=(echo "${colors[$i]}" | awk '{print $2}')
    systemColors[$i]="${colors[$i]}"
  done

  echo ""
  echo "        SysColr TstColr"
  echo "------- ------- -------"
  for (( i=0; i < ${#systemColors[@]}; i++ )); do
    echo "color${systemColors[$i]} ${colorCodes[$i]}"
  done

}
#getSystemColor

#------------------------------------------------------------------------------
printCurrentColorWide () {
  echo "Print Current System Color"
  echo ""

  #
  # To see the currently loaded resorces:
  #    xrdb -query -all
  #    xrdb -query -all | grep '\*color.*\:.*#' | sed 's/^\*color//' | sed 's/**://'
  #

  local FGNAMES=(' black ' '  red  ' ' green ' ' yellow' '  blue ' 'magenta' '  cyan ' ' white ' ' black ' '  red  ' ' green ' ' yellow' '  blue ' 'magenta' '  cyan ' ' white ')
  local XCOLORS=('color0 ' 'color1 ' 'color2 ' 'color3 ' 'color4 ' 'color5 ' 'color6 ' 'color7 ' 'color8 ' 'color9 ' 'color10' 'color11' 'color12' 'color13' 'color14' 'color15')

  declare -a systemColors

  tput sgr0
  #echo -en "         "
  echo -en "      FG:"
  echo -en " "
  for h in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
      printf ' %7s ' ${XCOLORS[$h]}
  done
  echo $(tput sgr0)

  echo -en "   BG:   "
  echo -en "┌"
  for j in {0..143}; do
    echo -en "─"
  done
  echo "┐"

  #----------------------------------------------------------------------------
  #readarray -t colors < <(xrdb -query -all | grep '\*color.*\:.*#' | sed 's/^\*color//' | sed 's/**://' | sed 's/#//' | sort -n) 
  readarray -t colors < <( xrdb -query -all | grep '\*.*color.*\:.*#' | sed 's/^.*color//' | sed 's/**://' | sort -n )
  for (( i=0; i < ${#colors[@]}; i++ )); do
    #echo "${colors[$i]}"
    systemColors[$i]=$( echo "${colors[$i]}" | awk '{print $2}' )
    #systemColors[$i]="${colors[$i]}"
  done
  #for (( i=0; i < ${#systemColors[@]}; i++ )); do
  #  echo "color${systemColors[$i]} ${colorCodes[$i]}"
  #done
  #----------------------------------------------------------------------------

  for bg_color in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
    set_background=$(tput setab $bg_color)
    set_foreground2=$(tput setaf $bg_color)
    printf ' %7s ' ${XCOLORS[$bg_color]}
    echo -en "│"

    #bgc=$(fromhex ${colorCodes[$bg_color]})

    for fg_color in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
      set_foreground=$(tput setaf $fg_color)
      #set_background2=$(tput setab $fg_color)
      set_background2=$(tput setab 0)
      echo -n $set_background$set_foreground # set color
      #printf ' %7s ' ${FGNAMES[$fg_color]} # print text
      # XXX: -----------------------------------------------------
      #fgc=$(fromhex ${systemColors[$fg_color]})
      #t="$bgc,$fgc"
      t="XXX,XXX"
      ##printf '\e[38;5;%d;48;5;%dm %7s \e[0m' $fgc $bgc "$t"
      printf ' %7s ' "$t" # print text
      #-----------------------------------------------------------
    done

    tput sgr0
    echo -en "│"
    echo -n ${set_background2}${set_foreground2} # set color
    #printf ' %s' ${FGNAMES[$bg_color]}
    printf ' %7s' "${colorNames[$bg_color]}"              # print text (black, black, red, red, ...) outside-right of the box
    #printf ' #%6s ' ${systemColors[$bg_color]}
    printf ' #%6s ' "XXXXXX"
    echo $(tput sgr0)
  done

  echo -en "         "
  echo -en "└"
  for j in {0..143}; do
    echo -en "─"
  done
  echo "┘"

  tput sgr0
  echo -en "         "
  echo -en " "
  for h in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
    #printf ' %7s ' ${FGNAMES[$h]}
    printf ' %7s ' ${colorNames[$h]}
  done
  echo $(tput sgr0)                                 # reset background and foreground color
  echo ""
}

getSystemColorEscape () {
  #echo "Get System Color Escape Code"

  #local FGNAMES=('DBlack ' ' DRed  ' 'DGreen ' 'DYellow' ' DBlue ' 'DMgenta' ' DCyan ' 'DWhite ' 'LBlack ' ' LRed  ' 'LGreen ' 'LYellow' ' LBlue ' 'LMgenta' ' LCyan ' 'LWhite ')
  local XCOLORS=('color0 ' 'color1 ' 'color2 ' 'color3 ' 'color4 ' 'color5 ' 'color6 ' 'color7 ' 'color8 ' 'color9 ' 'color10' 'color11' 'color12' 'color13' 'color14' 'color15')

  #tput sgr0
  #echo $(tput sgr0)                                 # reset background and foreground color
  #echo -en "   BG:   "
  #tput setaf 170; echo "bismillah"
  #tput setaf 170 | xxd

  declare -A systemColorsEscape
  for color in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
    systemColorEscape[$color]=$(tput setab $color)
  done

  echo $systemColorsEscape
}

# Usage:
#   printTextWithColor <bg_color> <fg_color> <text_string>
# Example usage:
#   printTextWithColor 021 118 "semua ini adalah cobaan"
printTextWithColor () {
  bgColor256=$1
  fgColor256=$2
  text="$3"
  bgDefault256=0
  fgDefault256=255
  resetColorEscape="\e[38;5;${fgDefault256};48;5;${bgDefault256}m"
  printf "\e[38;5;${fgColor256};48;5;${bgColor256}m${text}${resetColorEscape}"
  printf "${resetColorEscape}"
}

runTest () {
  #printf '\e[38;5;%d;48;5;%dm %7s \e[0m' 40 228 "Percubaan 1 2 3"

  #getSystemColor
  #echo ""

  #tput setf 2 | xxd
  #tput setaf 2 | xxd

  printf "permulaan\n"
  printTextWithColor 21 118 "mari kita cuba\n"
  printTextWithColor 013 021 "populasi katak terbang di belakang kedai pak abu\n"
  printTextWithColor 014 020 "kedai pak ali"
  echo ""
  echo "masih belum berapa faham"
  printf "nampak bagus\n"
  printTextWithColor 021 013 "--> macam mana dengan yang ini <--\n"
  printf "nampak elok\n"
  echo -en "masih belum berapa faham\n"
  printf "mengelirukan\n"
  echo "ok ke tak ok ni?"
  #printf "\n"
  #echo ""
}

#------------------------------------------------------------------------------
function printTestcolorfileVsSystemColor {
  #echo "--> Begin printTestcolorfileVsSystemColor"

  local f="$1"
  local colors=( )
  local fileColors=( )

  #readarray -t colors < <( grep '\*\.color.*\:.*#' $f | sed 's/^\*\.color//' | sed 's/**://' | sort -n )
  readarray -t colors < <( grep '\*.*color.*\:.*#' $f | sed 's/^.*color//' | sed 's/**://' | sort -n )
  for (( i=0; i < ${#colors[@]}; i++ )); do
    fileColors[$i]="$( echo "${colors[$i]}" | awk '{print $2}' )"
    #echo "${fileColors[$i]}"
  done

  local XCOLORS=('color0 ' 'color1 ' 'color2 ' 'color3 ' 'color4 ' 'color5 ' 'color6 ' 'color7 ' 'color8 ' 'color9 ' 'color10' 'color11' 'color12' 'color13' 'color14' 'color15')

  tput sgr0
  echo ""
  echo "                          Hardcoded Test Colors                  Current System Colors                        File Colors"

  echo -en "         "
  #----------
  echo -en "         ┌"
  local j=0
  for j in {0..36}; do
    echo -en "─"
  done
  echo -en "┐"
  #----------
  echo -en " ┌"
  for j in {0..36}; do
    echo -en "─"
  done
  echo -en "┐"
  #----------
  echo -en " ┌"
  for j in {0..36}; do
    echo -en "─"
  done
  echo "┐"
  #----------

  local bg_color=0
  for bg_color in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do

    printf ' %7s ' ${XCOLORS[$bg_color]}            # print text (color0, color8, color1, ...) outside-left of the box
    printf ' %7s ' ${colorNames[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box

    #--------------------------------------------------------------------------
    # Print Hardcoded Test Colors
    #--------------------------------------------------------------------------
    echo -en "│ "

    bgc=$(fromhex ${colorCodes[$bg_color]})
    fg2c=$(fromhex ${colorCodes[$bg_color]})
    for fg_color in 0 15; do
      fgc=$(fromhex ${colorCodes[$fg_color]})
      bg2c=$(fromhex ${colorCodes[$fg_color]})
      t="$bgc,$fgc"
      printf '\e[38;5;%d;48;5;%dm %7s \e[0m' $fgc $bgc "$t"
    done

    tput sgr0                                       # reset background and foreground color
    printf '\e[38;5;%d;48;5;%dm %7s \e[0m' $bgc 15 "$t"
    #printf ' #%6s' ${colorCodes[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    printf '\e[38;5;%dm #%6s \e[0m' $fg2c ${colorCodes[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    echo -en "│ "

    #--------------------------------------------------------------------------
    # Print Current System Colors
    #--------------------------------------------------------------------------
    echo -en "│ "

    tput sgr0
    set_background=$(tput setab $bg_color)
    set_foreground2=$(tput setaf $bg_color)
    set_background3=$(tput setab 15)
    for fg_color in 0 15; do
      set_foreground=$(tput setaf $fg_color)
      set_background2=$(tput setab 0)
      echo -n $set_background$set_foreground # set color
      t="XXX,XXX"
      printf ' %7s ' "$t" # print text
    done
    #tput sgr0
    echo -n ${set_background3}${set_foreground2} # set color
    printf ' #%6s ' "XXXXXX"
    #printf ' #%6s ' "XXXXXX"
    #printf '\e[38;5;%dm #%6s \e[0m' $fg2c ${colorCodes[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    #printf '\e[38;5;%dm #%6s \e[0m' $fg2c "XXXXXX"              # print text (black, black, red, red, ...) outside-right of the box
    echo -n ${set_background2}${set_foreground2} # set color
    printf ' #%6s ' "XXXXXX"
    printf '\e[0m'              # print text (black, black, red, red, ...) outside-right of the box

    echo -en "│"

    #--------------------------------------------------------------------------
    # Print Colors from (Xresources format) file
    #--------------------------------------------------------------------------
    echo -en " │ "

    bgc=$(fromhex ${fileColors[$bg_color]})
    fg2c=$(fromhex ${fileColors[$bg_color]})
    for fg_color in 0 15; do
      fgc=$(fromhex ${fileColors[$fg_color]})
      bg2c=$(fromhex ${fileColors[$fg_color]})
      t="$bgc,$fgc"
      #t2="$bg2c,$fg2c"
      printf '\e[38;5;%d;48;5;%dm %7s \e[0m' $fgc $bgc "$t"
    done

    tput sgr0                                       # reset background and foreground color
    printf '\e[38;5;%d;48;5;%dm %7s \e[0m' $bgc 15 "$t"
    #printf ' #%6s' ${colorCodes[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    #printf '\e[38;5;%d;48;5;%dm #%6s \e[0m' $fg2c $bg2c ${colorCodes[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    #printf '\e[38;5;%d;48;5;%dm #%6s \e[0m' $fg2c 16 ${colorCodes[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    tt=${fileColors[$bg_color]}
    printf '\e[38;5;%dm %7s \e[0m' $fg2c ${tt}
    echo -en "│ "

    #--------------------------------------------------------------------------

    echo $(tput sgr0)
  done

  echo -en "         "
  #----------
  echo -en "         └"
  for j in {0..36}; do
    echo -en "─"
  done
  echo -en "┘"
  #----------
  echo -en " └"
  for j in {0..36}; do
    echo -en "─"
  done
  echo -en "┘"
  #----------
  echo -en " └"
  for j in {0..36}; do
    echo -en "─"
  done
  echo "┘"
  #----------

  echo $(tput sgr0)                                 # reset background and foreground color

  #echo "--> End printTestcolorfileVsSystemColor"
}

#------------------------------------------------------------------------------
function printNajibColors {
  local XCOLORS=('color0 ' 'color1 ' 'color2 ' 'color3 ' 'color4 ' 'color5 ' 'color6 ' 'color7 ' 'color8 ' 'color9 ' 'color10' 'color11' 'color12' 'color13' 'color14' 'color15')

  tput sgr0
  echo ""
  echo "                           Najib's Color Scheme"

  echo -en "         "
  echo -en "         ┌"
  local j=0
  for j in {0..36}; do
    echo -en "─"
  done
  echo "┐"

  local bg_color=0
  for bg_color in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do

    printf ' %7s ' ${XCOLORS[$bg_color]}            # print text (color0, color8, color1, ...) outside-left of the box
    printf ' %7s ' ${colorNames[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box

    #--------------------------------------------------------------------------
    echo -en "│ "

    bgc=$(fromhex ${colorCodes[$bg_color]})
    fg2c=$(fromhex ${colorCodes[$bg_color]})
    for fg_color in 0 15; do
      fgc=$(fromhex ${colorCodes[$fg_color]})
      bg2c=$(fromhex ${colorCodes[$fg_color]})
      t="$bgc,$fgc"
      printf '\e[38;5;%d;48;5;%dm %7s \e[0m' $fgc $bgc "$t"
    done

    tput sgr0                                       # reset background and foreground color
    printf '\e[38;5;%d;48;5;%dm %7s \e[0m' $bgc 15 "$t"
    printf '\e[38;5;%dm #%6s\e[0m' $fg2c ${colorCodes[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    echo -en " │ "

    #--------------------------------------------------------------------------

    echo $(tput sgr0)
  done

  echo -en "         "
  echo -en "         └"
  for j in {0..36}; do
    echo -en "─"
  done
  echo "┘"

  echo $(tput sgr0)                                 # reset background and foreground color
  echo ""
}

#------------------------------------------------------------------------------
printTestcolorVsSystemColor () {
  #echo "--> Begin Test Color vs System Color"

  #local FGNAMES=(' black ' '  red  ' ' green ' ' yellow' '  blue ' 'magenta' '  cyan ' ' white ' ' black ' '  red  ' ' green ' ' yellow' '  blue ' 'magenta' '  cyan ' ' white ')
  local XCOLORS=('color0 ' 'color1 ' 'color2 ' 'color3 ' 'color4 ' 'color5 ' 'color6 ' 'color7 ' 'color8 ' 'color9 ' 'color10' 'color11' 'color12' 'color13' 'color14' 'color15')


  tput sgr0
  #echo -en "      FG:"
  #echo -en " "
  #for h in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do
  #    printf ' %7s ' ${XCOLORS[$h]}
  #done
  #echo $(tput sgr0)                                 # reset background and foreground color
  echo ""
  echo "                          Hardcoded Test Colors                  Current System Colors"

  #echo -en "   BG:   "
  echo -en "         "
  echo -en "         ┌"
  local j=0
  #for j in {0..27}; do
  for j in {0..36}; do
    echo -en "─"
  done
  echo -en "┐"
  echo -en " ┌"
  #for j in {0..27}; do
  for j in {0..36}; do
    echo -en "─"
  done
  echo "┐"

  local bg_color=0
  for bg_color in 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15; do

    printf ' %7s ' ${XCOLORS[$bg_color]}            # print text (color0, color8, color1, ...) outside-left of the box
    printf ' %7s ' ${colorNames[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box

    #--------------------------------------------------------------------------
    echo -en "│ "

    bgc=$(fromhex ${colorCodes[$bg_color]})
    fg2c=$(fromhex ${colorCodes[$bg_color]})
    for fg_color in 0 15; do
      fgc=$(fromhex ${colorCodes[$fg_color]})
      bg2c=$(fromhex ${colorCodes[$fg_color]})
      t="$bgc,$fgc"
      printf '\e[38;5;%d;48;5;%dm %7s \e[0m' $fgc $bgc "$t"
    done

    tput sgr0                                       # reset background and foreground color
    printf '\e[38;5;%d;48;5;%dm %7s \e[0m' $bgc 15 "$t"
    #printf ' #%6s' ${colorCodes[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    printf '\e[38;5;%dm #%6s\e[0m' $fg2c ${colorCodes[$bg_color]}              # print text (black, black, red, red, ...) outside-right of the box
    echo -en " │ "

    #--------------------------------------------------------------------------
    echo -en "│ "

    tput sgr0
    set_background=$(tput setab $bg_color)
    set_background3=$(tput setab 15)
    set_foreground2=$(tput setaf $bg_color)
    for fg_color in 0 15; do
      set_foreground=$(tput setaf $fg_color)
      set_background2=$(tput setab 0)
      echo -n $set_background$set_foreground # set color
      t="XXX,XXX"
      printf ' %7s ' "$t" # print text
    done
    tput sgr0
    echo -n ${set_background3}${set_foreground2} # set color
    printf ' #%6s ' "XXXXXX"
    #printf ' #%6s ' "XXXXXX"
    echo -n ${set_background2}${set_foreground2} # set color
    printf ' #%6s ' "XXXXXX"
    printf '\e[0m'              # print text (black, black, red, red, ...) outside-right of the box

    echo -en "│"
    #--------------------------------------------------------------------------

    echo $(tput sgr0)
  done

  echo -en "         "
  echo -en "         └"
  #for j in {0..27}; do
  for j in {0..36}; do
    echo -en "─"
  done
  echo -en "┘"
  echo -en " └"
  #for j in {0..27}; do
  for j in {0..36}; do
    echo -en "─"
  done
  echo "┘"

  echo $(tput sgr0)                                 # reset background and foreground color
  #echo "--> End Test Color vs System Color"
}

#------------------------------------------------------------------------------
printUsage () {
  echo "Usage:"
  echo "  colortest-xresources [option]"
  echo ""
  echo "Option:"
  echo "  -h,--help            Print this help"
  echo "  -t,--test            Print full (hardcoded) test colors"
  echo "  -t,--test <file>     Print full colors from (Xresources format) file"
  echo "  -s,--system          Print full current system (Xresources) colors"
  #echo "  -f,--file <file>     Print differences between the colors from (Xresources format) file and current system colors"
  echo "  -d,--diff            Print differences between the (hardcoded) test colors and current system (Xresources) colors"
  echo "  -d,--diff <file>     Print differences between the (hardcoded) test colors, current system (Xresources) colors, and colors from (Xresources format) file"
  echo "  -n,--najib           Print Najib's color scheme"
  echo ""
}

#------------------------------------------------------------------------------
#main () {
  #local p1=$1
  #local p2=$2

  case $1 in
    --test|-t)
      if [ -z "$2" ]; then
        printTestColorWide
      else
        printTestColorWideWithFile "$2"
      fi
        ;;
    --system|-s)
      printCurrentColorWide
      ;;
    #--file|-f)
    #  if [ -z "$2" ]; then
    #    printUsage
    #  else
    #    printTestColorWideWithFile "$2"
    #  fi
    #  ;;
    --diff|-d)
      if [ -z "$2" ]; then
        printTestcolorVsSystemColor
      else
        printTestcolorfileVsSystemColor "$2"
        #printTestcolorVsSystemColor "$2"
      fi
      ;;
    -n|--najib)
      if [ -z "$2" ]; then
        printNajibColors
      else
        printUsage
      fi
      ;;
    h|help|--help|-h)
      printUsage
      ;;
    --xxx|-x)
      runTest
      ;;
    *)
      printUsage
      ;;
    esac
#}

#if [ $# -eq 0 ]; then
#  #echo "000"
#  #echo "No arguments supplied"
#  main --diff
#elif [ -z "$1" ]; then
#  #echo "No argument supplied"
#  main --diff
#elif [ $# -eq 2 ]; then
#  #echo "222"
#  main "$1" "$2"
#else
#  #echo "111"
#  main $1
#fi


